# ðŸŒŠ Luna Platform - DigitalOcean VPS Deployment
# Complete stack with Prometheus + Grafana monitoring

version: "3.8"

services:
  # =============================================================================
  # FRONTEND - React Client
  # =============================================================================
  luna-client:
    build:
      context: ./client
      dockerfile: Dockerfile.production
    container_name: luna-client
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - luna-network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=80"

  # =============================================================================
  # BACKEND - Node.js API Server
  # =============================================================================
  luna-server:
    build:
      context: .
      dockerfile: server/Dockerfile.production
    container_name: luna-server
    restart: unless-stopped
    environment:
      # Core Configuration
      - NODE_ENV=production
      - PORT=3000
      
      # File Processing
      - MAX_FILE_SIZE=62914560
      - UPLOAD_TEMP_DIR=/app/temp/uploads
      - ASPOSE_TEMP_DIR=/app/temp/aspose
      
      # Java Configuration
      - JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
      - JAVA_OPTS=-Xmx2g -Xms512m -Djava.awt.headless=true
      
      # Aspose Configuration
      - ASPOSE_LICENSE_PATH=/app/Aspose.Slides.Product.Family.lic
      
      # Firebase Configuration
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET}
      
      # OpenAI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=gpt-4-turbo-preview
      
      # Security
      - CORS_ORIGIN=${CORS_ORIGIN:-https://luna.yourdomain.com}
      - JWT_SECRET=${JWT_SECRET}
      
    volumes:
      - luna_uploads:/app/temp/uploads
      - luna_aspose:/app/temp/aspose
      - luna_conversions:/app/temp/conversions
      - luna_logs:/app/logs
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    depends_on:
      - luna-client
    
    networks:
      - luna-network
    
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=3000"
      - "prometheus.io/path=/metrics"

  # =============================================================================
  # NGINX - Reverse Proxy & Load Balancer
  # =============================================================================
  luna-nginx:
    image: nginx:alpine
    container_name: luna-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.digitalocean.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - certbot_certs:/etc/letsencrypt:ro
    depends_on:
      - luna-client
      - luna-server
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/nginx-health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - luna-network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=80"

  # =============================================================================
  # MONITORING - Prometheus
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: luna-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - luna-network

  # =============================================================================
  # MONITORING - Grafana
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: luna-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN:-localhost}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST:-smtp.gmail.com:587}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM:-alerts@yourdomain.com}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - luna-network

  # =============================================================================
  # MONITORING - Node Exporter (System Metrics)
  # =============================================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: luna-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - luna-network

  # =============================================================================
  # MONITORING - cAdvisor (Container Metrics)
  # =============================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: luna-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - luna-network

  # =============================================================================
  # SSL - Let's Encrypt Certbot
  # =============================================================================
  certbot:
    image: certbot/certbot:latest
    container_name: luna-certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: echo "Certbot container ready for manual SSL setup"

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================
networks:
  luna-network:
    driver: bridge

volumes:
  luna_uploads:
  luna_aspose:
  luna_conversions:
  luna_logs:
  prometheus_data:
  grafana_data:
  certbot_certs:
  certbot_www: 