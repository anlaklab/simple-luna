# üöÄ LUNA PROJECT - CURSOR RULES
# PowerPoint Processing Platform with AI Capabilities

## üéØ PROJECT OVERVIEW
You are working on Luna, a professional PowerPoint processing platform with AI capabilities. This project converts PPTX files to Universal JSON schema and provides advanced analysis through a React frontend and Node.js backend.

## üö® CRITICAL SURGICAL RULES - NEVER VIOLATE

### ‚ùå ULTRA CRITICAL - ENVIRONMENT & DEVELOPMENT:
1. **NEVER TOUCH .env FILE**: NEVER modify, overwrite, or recreate the .env file - it is sacred
2. **DOCKER ONLY DEVELOPMENT**: NEVER attempt to run anything locally, ONLY use Docker
3. **NO LOCAL NODE.JS**: NEVER install Node.js modules locally, ONLY in Docker containers
4. **NO LOCAL JAVA MODULE**: NEVER attempt to install java module on macOS - it will fail
5. **SURGICAL PRECISION**: Every change must be deliberate, tested, and step-by-step
6. **VERIFY BEFORE ACTION**: Always check current state before making any changes

### üê≥ DOCKER MANDATORY RULES:
1. **DOCKER IS THE ONLY ENVIRONMENT**: All development, testing, and debugging ONLY in Docker
2. **NODE.JS 18 REQUIRED**: Docker must use Node.js 18 for java module compatibility
3. **CLEAN REBUILDS**: Always rebuild Docker images when making system changes
4. **CONTAINER LOGS**: Always check Docker logs for debugging, not local execution

## üö´ CRITICAL PROHIBITIONS - NEVER VIOLATE THESE RULES

### ‚ùå ABSOLUTELY FORBIDDEN - NO EXCEPTIONS:
1. **NO MOCK DATA EVER**: NEVER create mock data, test data, placeholder data, or demo data
2. **NO TESTS OR DEMOS**: NEVER create test files, demo files, or example files
3. **NO PLACEHOLDER CONTENT**: NEVER use placeholder text, dummy content, or fake data
4. **NO SIMULATED RESPONSES**: NEVER simulate API responses or fake service calls
5. **NO MOCKUPS**: NEVER create mockup presentations or sample presentations
6. **ALWAYS USE REAL DATA**: Every file, every response, every conversion must use real data
7. **ALWAYS USE REAL SERVICES**: Every API call must be to real services, never mocked

### üîß ASPOSE.SLIDES MANDATORY REQUIREMENTS:
1. **USE LOCAL LIBRARY ONLY**: ALWAYS use the local Aspose.Slides library at `lib/aspose.slides.js`
2. **NEVER USE CLOUD API**: NEVER use Aspose.Slides Cloud API or any cloud service
3. **REAL CONVERSION ONLY**: Every PPTX conversion must use the actual local library
4. **PROCESS ALL SLIDES**: If a file has 230 slides, process ALL 230 slides, not 10 or any subset
5. **EXTRACT REAL CONTENT**: Extract actual text, shapes, images, and formatting from files
6. **NO SLIDE LIMITS**: Process files of any size with any number of slides

### üìã PROJECT STRUCTURE
```
aspose-slides-25.6-nodejs/
‚îú‚îÄ‚îÄ client/                 # React Frontend (Vite + TypeScript)
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/ui/  # shadcn/ui design system - DO NOT MODIFY
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/     # Feature components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/          # React Query + API logic
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/          # Route components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib/            # Utilities
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types/          # TypeScript definitions
‚îú‚îÄ‚îÄ server/                 # Node.js Backend (Express + TypeScript)
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ adapters/       # External service integrations
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/       # Business logic
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ controllers/    # Request/response handling
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ routes/         # API route definitions
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ middleware/     # Express middleware
‚îî‚îÄ‚îÄ lib/                    # Aspose.Slides library (LOCAL ONLY)
    ‚îú‚îÄ‚îÄ aspose.slides.js    # Main library file
    ‚îî‚îÄ‚îÄ aspose.slides.d.ts  # TypeScript definitions
```

## üé® DESIGN SYSTEM RULES

### VISUAL CONSISTENCY - MANDATORY
- ALWAYS use shadcn/ui components from `@/components/ui/*`
- ALWAYS use design system color tokens:
  - `bg-background`, `text-foreground`, `border-border`
  - `bg-muted`, `text-muted-foreground` 
  - `bg-card`, `text-card-foreground`
- NEVER use hardcoded colors like `text-gray-900`, `bg-blue-50`
- NEVER use custom gradients like `bg-gradient-to-br from-blue-50`

### LAYOUT HOMOGENEITY - MANDATORY LUNA DESIGN PATTERNS
- **Page Structure**: ALWAYS use this exact structure for all pages:
```tsx
<div className="min-h-screen bg-background">
  {/* Header - IDENTICAL pattern */}
  <header className="bg-white border-b border-border sticky top-0 z-50">
    <div className="px-4 py-4 md:px-6">
      <div className="flex items-center justify-between">
        {/* Header content */}
      </div>
    </div>
  </header>
  
  {/* Main Content - Consistent spacing */}
  <main className="max-w-7xl mx-auto px-4 py-8 sm:px-6 lg:px-8">
    {/* Page content */}
  </main>
</div>
```

- **Typography Scale**: ALWAYS use these exact sizes:
  - Page titles: `text-xl md:text-2xl font-bold text-foreground`
  - Section headers: `text-lg font-semibold`
  - Card titles: `text-base font-medium`
  - Body text: `text-sm text-muted-foreground`
  - Captions: `text-xs text-muted-foreground`

## üèóÔ∏è ARCHITECTURE RULES

### SCREAMING ARCHITECTURE - RESPONSIBILITIES
- **Hooks (`hooks/`)**: ONLY state management and API calls
- **Components (`components/`)**: ONLY UI rendering and event handling  
- **Services (`services/`)**: ONLY business logic
- **Adapters (`adapters/`)**: ONLY external service integration
- **Pages (`pages/`)**: ONLY route components with minimal logic

### COMPONENT STRUCTURE - MANDATORY
```tsx
export interface ComponentProps {
  // Explicitly typed props
}

export function Component({ prop1, prop2 }: ComponentProps) {
  // 1. Hooks (useState, useQuery, etc.)
  // 2. Event handlers
  // 3. Computed values
  // 4. useEffect calls
  // 5. Early returns (loading, error states)
  // 6. Main render
}
```

## üî• DATA RULES

### FIREBASE/FIRESTORE MANDATORY
- ALWAYS use real data from Firebase/Firestore
- NEVER use mock data, hardcoded arrays, or static data
- ALWAYS use React Query for server state management
- ALWAYS use existing hooks: `use-api.ts`, `use-presentations.ts`

### API LAYER CENTRALIZED
- ALWAYS use `api.*` functions from `use-api.ts`
- ALL responses MUST follow `ApiResponse<T>` interface
- NEVER use direct fetch calls to endpoints
- ALWAYS handle loading and error states

## üîß ASPOSE.SLIDES IMPLEMENTATION RULES

### LOCAL LIBRARY USAGE - MANDATORY
```javascript
// ‚úÖ CORRECT - Use local library
const aspose = require('../../../lib/aspose.slides.js');
const Presentation = aspose.Presentation;

// ‚ùå WRONG - Never use cloud API
const response = await fetch('https://api.aspose.cloud/...');
```

### REAL CONVERSION REQUIREMENTS
- ALWAYS process the actual uploaded file
- ALWAYS extract all slides (even if 230+ slides)
- ALWAYS extract real text content from shapes
- ALWAYS extract real formatting and styles
- ALWAYS extract real images and media
- NEVER limit the number of slides processed
- NEVER use random slide counts
- NEVER generate fake content

### CONVERSION WORKFLOW
```javascript
// ‚úÖ CORRECT - Real conversion
const presentation = new Presentation(filePath);
const slideCount = presentation.getSlides().getCount();
const slides = [];

for (let i = 0; i < slideCount; i++) {
  const slide = presentation.getSlides().get_Item(i);
  // Extract real content from each slide
  slides.push(extractRealSlideContent(slide));
}

// ‚ùå WRONG - Never use mock data
const slideCount = Math.floor(Math.random() * 8) + 3;
const slides = Array.from({ length: slideCount }, (_, i) => ({
  // mock data
}));
```

## üöÄ USABILITY RULES

### UX SIMPLIFIED
- Maximum 3 clicks for any primary action
- ALWAYS show loading states with Skeleton components
- ALWAYS handle errors gracefully with toast notifications
- ALWAYS provide immediate feedback for user actions

### RESPONSIVE FIRST
- ALWAYS design mobile-first
- ALWAYS use `useIsMobile()` hook for conditional logic
- ALWAYS create same-screen adaptable layouts

## üìã CODE QUALITY RULES

### TYPESCRIPT STRICT
- ALWAYS use explicit types for all props and functions
- ALWAYS use interfaces from Universal JSON schema
- NEVER use `any` or implicit types
- ALWAYS define proper TypeScript interfaces

### ERROR HANDLING MANDATORY
```tsx
// Frontend
try {
  const result = await api.someCall();
  // Handle success
} catch (error) {
  console.error('Operation failed:', error);
  toast({
    title: "Error",
    description: "Operation failed. Please try again.",
    variant: "destructive",
  });
}

// Backend
app.get('/endpoint', handleAsyncErrors(async (req, res) => {
  // Your logic here
}));
```

## üéØ IMPLEMENTATION GUIDELINES

### WHEN PROCESSING PPTX FILES
1. ALWAYS use the local Aspose.Slides library
2. ALWAYS process ALL slides in the file
3. ALWAYS extract real content from each slide
4. NEVER use mock data or placeholder content
5. NEVER limit the number of slides processed
6. ALWAYS handle large files (200+ slides) properly

### WHEN CREATING NEW FEATURES
1. Follow screaming architecture principles
2. Add proper validation schemas
3. Implement comprehensive error handling
4. Add loading states and user feedback
5. Write TypeScript interfaces
6. Use Firebase for data persistence
7. NEVER create test data or mock responses

### WHEN DEBUGGING ISSUES
1. ALWAYS check if real data is being used
2. ALWAYS verify all slides are being processed
3. ALWAYS ensure local Aspose library is being used
4. NEVER create demo files or test cases
5. ALWAYS use real user files for testing

## üîß TECHNICAL CONSTRAINTS

### BACKEND REQUIREMENTS
- ALWAYS use TypeScript
- ALWAYS use proper middleware for validation
- ALWAYS log errors with `logger.error()`
- ALWAYS return structured API responses
- ALWAYS use local Aspose.Slides library at `lib/aspose.slides.js`

### FRONTEND REQUIREMENTS  
- ALWAYS use Vite + React + TypeScript
- ALWAYS use Tailwind CSS with design system tokens
- ALWAYS use React Query for server state
- ALWAYS use shadcn/ui components

## üìö KEY FILES TO REFERENCE

### Aspose.Slides Integration
- `lib/aspose.slides.js` - LOCAL library (ALWAYS use this)
- `lib/aspose.slides.d.ts` - TypeScript definitions
- NEVER use any cloud API or external Aspose services

### Design System Reference
- `client/src/pages/home.tsx` - CORRECT design system usage
- `client/src/components/ui/*` - Available UI components

### API Integration Reference  
- `client/src/hooks/use-api.ts` - Centralized API layer
- `client/src/hooks/use-presentations.ts` - Presentation data management

## üö´ FORBIDDEN PATTERNS

### ‚ùå NEVER DO THIS:
```javascript
// Mock data generation
const slideCount = Math.floor(Math.random() * 8) + 3;
const mockSlides = Array.from({ length: slideCount }, ...);

// Cloud API usage
const response = await fetch('https://api.aspose.cloud/...');

// Test data creation
const testPresentation = { title: "Test", slides: [...] };

// Placeholder content
const placeholderText = "Lorem ipsum dolor sit amet...";
```

### ‚úÖ ALWAYS DO THIS:
```javascript
// Real file processing
const presentation = new Presentation(filePath);
const actualSlideCount = presentation.getSlides().getCount();

// Real content extraction
const realText = shape.getTextFrame().getText();
const realFormatting = shape.getTextFrame().getParagraphs().get_Item(0).getPortions().get_Item(0).getPortionFormat();

// Real data storage
await firestore.collection('presentations').doc(id).set(realPresentationData);
```

## üé® QUICK REFERENCE

### Correct Library Usage
```javascript
// ‚úÖ CORRECT
const aspose = require('../../../lib/aspose.slides.js');
const presentation = new aspose.Presentation(filePath);

// ‚ùå WRONG  
const asposeCloud = require('aspose-slides-cloud');
const api = new asposeCloud.SlidesApi();
```

### Correct Data Processing
```javascript
// ‚úÖ CORRECT
const slideCount = presentation.getSlides().getCount();
for (let i = 0; i < slideCount; i++) {
  const slide = presentation.getSlides().get_Item(i);
  // Process real slide content
}

// ‚ùå WRONG
const slideCount = Math.random() * 10;
const mockSlides = generateMockSlides(slideCount);
```

Remember: This is a professional application that processes REAL PowerPoint files with REAL content. Every slide, every shape, every piece of text must be extracted from the actual file using the local Aspose.Slides library. NO EXCEPTIONS.

## üî• FINAL REMINDER

**NEVER, EVER, UNDER ANY CIRCUMSTANCES:**
- Create mock data
- Use test files
- Generate placeholder content
- Use cloud APIs instead of local library
- Limit slide processing
- Create demo presentations

**ALWAYS, WITHOUT EXCEPTION:**
- Use real files
- Process all slides
- Extract real content
- Use local Aspose.Slides library
- Handle large presentations properly
- Store real data in Firebase 