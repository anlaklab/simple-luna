# üê≥ Luna Production - Full Stack Dockerfile for Coolify
# Single container with built client and server
# FORCE REBUILD: 2025-01-12-02:15 - Fix Swagger endpoints & URL

# Stage 1: Build Client
FROM node:18-alpine AS client-builder

# FORCE CACHE BUST - Unique timestamp 
ARG CACHEBUST=2025-01-12-02:15
RUN echo "Cache bust: $CACHEBUST - Forcing fresh build with fixed OpenAPI documentation generation"

WORKDIR /app/client
COPY client/package*.json ./
RUN npm ci

COPY client/ ./
RUN npm run build

# Stage 2: Build Server
FROM node:18-bullseye AS server-builder

# FORCE CACHE BUST - Unique timestamp 
ARG CACHEBUST=2025-01-12-02:15
RUN echo "Server cache bust: $CACHEBUST - Forcing fresh server build with corrected OpenAPI generation"

# Install system dependencies
RUN apt-get update && apt-get install -y \
    openjdk-11-jre \
    openjdk-11-jdk \
    python3 \
    make \
    g++ \
    gcc \
    build-essential \
    fontconfig \
    fonts-dejavu \
    && rm -rf /var/lib/apt/lists/*

# Set Java environment
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
ENV PATH="$JAVA_HOME/bin:${PATH}"
ENV JAVA_TOOL_OPTIONS="-Djava.awt.headless=true -Dfile.encoding=UTF-8"
ENV LD_LIBRARY_PATH="$JAVA_HOME/lib/server:$JAVA_HOME/lib:${LD_LIBRARY_PATH:-}"

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY server/package*.json ./server/

# Install ALL dependencies (including devDependencies for TypeScript build)
WORKDIR /app/server
RUN npm ci

WORKDIR /app
RUN npm ci

# Install Java module
RUN export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64 && \
    npm install java@0.14.0 --build-from-source

# Copy and build server
COPY lib/ ./lib/
COPY server/ ./server/

# Copy Aspose license file (optional - create empty if not exists)
RUN touch Aspose.Slides.Product.Family.lic
COPY Aspose.Slides.Product.Family.lic* ./

WORKDIR /app/server
RUN npm run build

# ‚úÖ GENERATE OPENAPI DOCUMENTATION AT BUILD TIME
# This fixes the Swagger UI empty endpoints problem
RUN echo "üîß Generating OpenAPI documentation using existing swagger config..." && \
    node -e " \
    const { generateSwaggerSpec } = require('./dist/swagger/swagger.config.js'); \
    const fs = require('fs'); \
    try { \
      const spec = generateSwaggerSpec(); \
      fs.writeFileSync('./dist/openapi.json', JSON.stringify(spec, null, 2)); \
      console.log('‚úÖ OpenAPI spec generated successfully with', Object.keys(spec.paths || {}).length, 'endpoints'); \
    } catch (error) { \
      console.error('‚ùå Error generating OpenAPI spec:', error.message); \
      const fallbackSpec = { \
        openapi: '3.0.0', \
        info: { title: 'Luna Server API', version: '1.0.0', description: 'Professional PowerPoint processing API with AI capabilities' }, \
        servers: [{ url: 'https://luna.anlaklab.com/api/v1', description: 'Production' }], \
        paths: {} \
      }; \
      fs.writeFileSync('./dist/openapi.json', JSON.stringify(fallbackSpec, null, 2)); \
      console.log('‚ö†Ô∏è Generated fallback OpenAPI spec'); \
    } \
    " && \
    ls -la dist/openapi.json

# Stage 3: Production
FROM node:18-bullseye AS production

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    openjdk-11-jre \
    nginx \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set Java environment
ENV JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
ENV PATH="$JAVA_HOME/bin:${PATH}"
ENV JAVA_TOOL_OPTIONS="-Djava.awt.headless=true -Dfile.encoding=UTF-8"
ENV LD_LIBRARY_PATH="$JAVA_HOME/lib/server:$JAVA_HOME/lib:${LD_LIBRARY_PATH:-}"

WORKDIR /app

# Copy built client
COPY --from=client-builder /app/client/dist /var/www/html

# Copy server package files and install production dependencies
COPY --from=server-builder /app/server/package*.json ./server/
WORKDIR /app/server
RUN npm ci --only=production

# Copy built server and other runtime files
WORKDIR /app
COPY --from=server-builder /app/server/dist ./server/dist
COPY --from=server-builder /app/lib ./lib
COPY --from=server-builder /app/node_modules ./node_modules
COPY --from=server-builder /app/Aspose.Slides.Product.Family.lic ./

# Copy nginx configuration
COPY nginx.production.conf /etc/nginx/nginx.conf

# Create necessary directories
RUN mkdir -p /app/temp/{uploads,aspose,conversions,thumbnails} /app/logs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000/api/v1/health || exit 1

EXPOSE 80

# Start script
COPY start-production.sh /start.sh
RUN chmod +x /start.sh

CMD ["/start.sh"] 