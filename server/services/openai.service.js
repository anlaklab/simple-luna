/**
 * OpenAI Service
 * 
 * Real OpenAI integration for AI-powered presentation generation
 * NO MOCK DATA - Everything is generated by real GPT-4
 */

const OpenAI = require('openai');

class OpenAIService {
  constructor() {
    this.client = null;
    this.initialized = false;
    this.init();
  }

  init() {
    try {
      const apiKey = process.env.OPENAI_API_KEY;
      
      if (!apiKey) {
        console.warn('‚ö†Ô∏è OpenAI API key not found in environment variables');
        console.warn('üí° Add OPENAI_API_KEY to your .env file to enable real AI generation');
        return;
      }

      this.client = new OpenAI({
        apiKey: apiKey,
      });

      this.initialized = true;
      console.log('‚úÖ OpenAI service initialized successfully');
      
    } catch (error) {
      console.error('‚ùå Failed to initialize OpenAI service:', error.message);
    }
  }

  isAvailable() {
    return this.initialized && this.client !== null;
  }

  /**
   * Generate presentation content using real GPT-4
   * @param {string} prompt - User prompt for presentation
   * @param {number} slideCount - Number of slides to generate
   * @param {string} style - Presentation style (professional, creative, minimal, corporate)
   * @returns {Promise<Object>} Generated presentation content
   */
  async generatePresentationContent(prompt, slideCount = 8, style = 'professional') {
    if (!this.isAvailable()) {
      throw new Error('OpenAI service not available. Please check your API key configuration.');
    }

    try {
      console.log(`ü§ñ Generating presentation content with GPT-4...`);
      console.log(`üìù Prompt: "${prompt}"`);
      console.log(`üìä Slides: ${slideCount}, Style: ${style}`);

      const systemPrompt = this.createSystemPrompt(style);
      const userPrompt = this.createUserPrompt(prompt, slideCount, style);

      const startTime = Date.now();
      
      const completion = await this.client.chat.completions.create({
        model: "gpt-4-turbo-preview",
        messages: [
          {
            role: "system",
            content: systemPrompt
          },
          {
            role: "user", 
            content: userPrompt
          }
        ],
        temperature: 0.7,
        max_tokens: 4000,
        response_format: { type: "json_object" }
      });

      const processingTime = Date.now() - startTime;
      console.log(`‚úÖ GPT-4 content generated in ${processingTime}ms`);

      const generatedContent = JSON.parse(completion.choices[0].message.content);
      
      // Validate the generated content structure
      this.validateGeneratedContent(generatedContent, slideCount);
      
      return {
        content: generatedContent,
        metadata: {
          model: completion.model,
          usage: completion.usage,
          processingTimeMs: processingTime,
          finishReason: completion.choices[0].finish_reason,
          generatedAt: new Date().toISOString()
        }
      };

    } catch (error) {
      console.error('‚ùå OpenAI generation failed:', error);
      throw new Error(`OpenAI content generation failed: ${error.message}`);
    }
  }

  /**
   * Create system prompt for GPT-4 based on style
   */
  createSystemPrompt(style) {
    const styleInstructions = {
      professional: "Create professional, business-focused content with clear structure and formal tone. Use corporate language and data-driven insights.",
      creative: "Generate creative, engaging content with innovative ideas and dynamic presentation flow. Use storytelling elements and compelling narratives.", 
      minimal: "Produce clean, concise content with minimal text and maximum impact. Focus on key points and clear messaging.",
      corporate: "Develop formal, enterprise-level content suitable for executive presentations. Include strategic insights and business intelligence."
    };

    return `You are an expert presentation designer and content strategist. Your task is to generate comprehensive, professional presentation content.

STYLE: ${style}
INSTRUCTIONS: ${styleInstructions[style]}

You must return a JSON object with this exact structure:
{
  "title": "Main presentation title",
  "description": "Brief description of the presentation",
  "slides": [
    {
      "slideNumber": 1,
      "title": "Slide title",
      "content": "Main slide content",
      "bulletPoints": ["Point 1", "Point 2", "Point 3"],
      "speakerNotes": "Additional context for the presenter",
      "slideType": "title|content|conclusion"
    }
  ],
  "keywords": ["keyword1", "keyword2", "keyword3"],
  "targetAudience": "Description of target audience",
  "estimatedDuration": "Estimated presentation duration in minutes"
}

REQUIREMENTS:
- Create engaging, informative content
- Ensure logical flow between slides
- Include actionable insights
- Use appropriate business terminology
- Make content suitable for the specified style
- Ensure each slide has substantial, meaningful content
- Include relevant speaker notes for each slide`;
  }

  /**
   * Create user prompt for specific presentation request
   */
  createUserPrompt(prompt, slideCount, style) {
    return `Create a ${slideCount}-slide presentation about: "${prompt}"

Style: ${style}
Target audience: Professional/Business

Requirements:
1. Slide 1: Compelling title slide with subtitle
2. Slides 2-${slideCount-1}: Content slides with main points, insights, and data
3. Slide ${slideCount}: Strong conclusion with key takeaways and next steps

For each slide:
- Create a compelling title
- Provide substantial content (not just bullet points)
- Include 3-5 relevant bullet points
- Add helpful speaker notes
- Ensure smooth transitions between slides

Make the content informative, well-researched, and engaging. Focus on providing real value to the audience.`;
  }

  /**
   * Validate generated content structure
   */
  validateGeneratedContent(content, expectedSlideCount) {
    if (!content.title || !content.slides || !Array.isArray(content.slides)) {
      throw new Error('Invalid content structure: missing title or slides array');
    }

    if (content.slides.length !== expectedSlideCount) {
      console.warn(`‚ö†Ô∏è Generated ${content.slides.length} slides, expected ${expectedSlideCount}`);
    }

    // Validate each slide has required fields
    content.slides.forEach((slide, index) => {
      if (!slide.title || !slide.content) {
        throw new Error(`Invalid slide ${index + 1}: missing title or content`);
      }
    });

    console.log(`‚úÖ Content validation passed: ${content.slides.length} slides generated`);
  }

  /**
   * Generate presentation outline (faster, for previews)
   */
  async generateOutline(prompt, slideCount = 8) {
    if (!this.isAvailable()) {
      throw new Error('OpenAI service not available');
    }

    try {
      const completion = await this.client.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "You are a presentation outline generator. Create a JSON outline with slide titles and brief descriptions."
          },
          {
            role: "user",
            content: `Create a ${slideCount}-slide presentation outline for: "${prompt}". Return JSON with slides array containing title and brief description for each slide.`
          }
        ],
        temperature: 0.5,
        max_tokens: 1000,
        response_format: { type: "json_object" }
      });

      return JSON.parse(completion.choices[0].message.content);

    } catch (error) {
      console.error('‚ùå Outline generation failed:', error);
      throw new Error(`Outline generation failed: ${error.message}`);
    }
  }

  /**
   * Enhance existing content with AI
   */
  async enhanceContent(existingContent, enhancementType = 'improve') {
    if (!this.isAvailable()) {
      throw new Error('OpenAI service not available');
    }

    const enhancementPrompts = {
      improve: "Improve the existing content by making it more engaging, adding relevant details, and enhancing clarity.",
      expand: "Expand the existing content with additional insights, examples, and supporting information.",
      simplify: "Simplify the existing content to make it more accessible and easier to understand.",
      professional: "Make the existing content more professional and business-appropriate."
    };

    try {
      const completion = await this.client.chat.completions.create({
        model: "gpt-4-turbo-preview",
        messages: [
          {
            role: "system",
            content: `You are a presentation content enhancer. ${enhancementPrompts[enhancementType]} Return the enhanced content in the same JSON structure.`
          },
          {
            role: "user",
            content: `Enhance this presentation content:\n\n${JSON.stringify(existingContent, null, 2)}`
          }
        ],
        temperature: 0.6,
        max_tokens: 3000,
        response_format: { type: "json_object" }
      });

      return JSON.parse(completion.choices[0].message.content);

    } catch (error) {
      console.error('‚ùå Content enhancement failed:', error);
      throw new Error(`Content enhancement failed: ${error.message}`);
    }
  }

  /**
   * Get service status and usage information
   */
  getStatus() {
    return {
      available: this.isAvailable(),
      initialized: this.initialized,
      hasApiKey: !!process.env.OPENAI_API_KEY,
      service: 'OpenAI GPT-4',
      capabilities: [
        'presentation_generation',
        'content_enhancement', 
        'outline_generation',
        'multi_style_support'
      ]
    };
  }
}

// Create singleton instance
const openaiService = new OpenAIService();

module.exports = openaiService; 